# pyproject.toml (full)

[build-system]
requires = ["setuptools>=77.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sundew-algorithms"
version = "0.1.14"
description = "Sundew Algorithm â€” bio-inspired, energy-aware selective activation for edge AI systems."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
license-files = ["LICENSE"]

authors = [
  { name = "Oluwafemi Idiakhoa", email = "oluwafemidiakhoa@gmail.com" }
]

keywords = [
  "bio-inspired", "event-driven", "energy-efficient",
  "adaptive-threshold", "edge-ai", "gating", "control"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

# Core library is intentionally dependency-free.
dependencies = []

[project.optional-dependencies]
# Developer / CI extras.
dev = [
  "numpy>=1.23,<2.0",
  "pytest>=8.0",
  "pytest-cov>=4.0",
  "hypothesis>=6.0",
  "flake8>=7.0.0",
  "ruff>=0.5.0",
  "mypy>=1.10.0",
  "pre-commit>=3.5.0",
  "matplotlib>=3.3",   # for plotting scripts used in benchmarks and type resolution on CI
]
# Optional extras for running the public benchmarks and plots.
benchmarks = [
  "numpy>=1.23,<2.0",
  "matplotlib>=3.3",
]

[project.urls]
Homepage   = "https://github.com/oluwafemidiakhoa/sundew_algorithms"
Repository = "https://github.com/oluwafemidiakhoa/sundew_algorithms"
Issues     = "https://github.com/oluwafemidiakhoa/sundew_algorithms/issues"
"CI Actions" = "https://github.com/oluwafemidiakhoa/sundew_algorithms/actions"

[project.scripts]
sundew = "sundew.cli:main"

# -----------------
# Setuptools (src/)
# -----------------
[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["sundew*"]
exclude = ["tests*", "benchmarks*"]

# ---------------
# Pytest / Cov
# ---------------
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 1

# -----
# Ruff
# -----
[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
  ".venv", ".mypy_cache", ".pytest_cache",
  "build", "dist", ".hypothesis",
]

[tool.ruff.lint]
# Include import sort (isort rules) and basic E/F checks.
extend-select = ["I", "E", "F"]

[tool.ruff.lint.isort]
known-first-party = ["sundew"]
combine-as-imports = true
lines-after-imports = 2

# ----
# MyPy
# ----
[tool.mypy]
python_version = "3.10"
# src/ layout support
mypy_path = ["src"]
explicit_package_bases = true
# restrict to our code and tests/benchmarks
files = ["src", "tests", "benchmarks"]
exclude = "(^build/|^dist/|^\\.mypy_cache/|^\\.pytest_cache/|^\\.venv/)"

# Allow missing type info from plotting libs used in benchmarks.
[[tool.mypy.overrides]]
module = ["matplotlib.*"]
ignore_missing_imports = true
